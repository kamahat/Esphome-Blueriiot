substitutions:
  device_name: piscine-${octet1}
  friendly_name: piscine-${octet1}
  description: "BlueRiiot Proxy"
  device_area: Piscine
  board: esp32-poe-iso
  octet1: "182"


  #blueriiot_mac: 00:A0:50:56:xx:xx
  #blueriiot_nameprefix: mySwimingPool
  #blueriiot_idprefix: p1

  blueriiot_mac: !secret blueriiot_mac
  blueriiot_name_prefix: !secret blueriiot_nameprefix
  blueriiot_id_prefix: !secret blueriiot_idprefix
  
  # send true 0x01 to this service ID
  blueriiot_send_service_uuid: 'F3300001-F0A2-9B06-0C59-1BC4763B5C00'
  blueriiot_send_characteristic_uuid: 'F3300002-F0A2-9B06-0C59-1BC4763B5C00'
  
  # notification is recieved on this Service ID                  
  blueriiot_recieve_service_uuid: 'F3300001-F0A2-9B06-0C59-1BC4763B5C00'
  blueriiot_recieve_characteristic_uuid: 'F3300003-F0A2-9B06-0C59-1BC4763B5C00'

#
# =====================
# Source Info : https://community.home-assistant.io/t/blue-connect-pool-measurements/118901/420?page=11
# =====================
# rev 2025-06-05
# - All LOW/GOOD/BAD relation for Salt concentraiton linkted to temperature
# - correcte chlorine sensor
# - correction battery
# - change uptime 
# =====================
#
esphome:
  name: ${device_name}
  area: ${device_area}

esp32:
  board: ${board}
  framework:
    type: esp-idf

# Packages :
packages : 
  #wifi: !include common/wifi-iot.yaml
  device_base: !include common/base.yaml
  ethernet: !include common/ethernet.yaml
  network-service: !include common/network-service.yaml

# Enable logging
logger:
    level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret 

ota:
   - platform: esphome
     password: !secret 

#====================
esp32_ble_tracker:
  scan_parameters:
    active: false
    interval: 1000ms
    window: 700ms
  on_ble_advertise:
    - mac_address: ${blueriiot_mac}
      then:
        - logger.log: 
            format: "Found Blueriiot sensor"
            level: "DEBUG"

ble_client:
  - mac_address: ${blueriiot_mac}
    id: ble_client_${blueriiot_id_prefix}
    on_connect: 
      then:
        - logger.log: 
            format: "Connected to Blueriiot sensor"
            level: "INFO"
        - lambda: "id(binary_sensor_${blueriiot_id_prefix}_connected).publish_state(true);"
        - delay: 2s
        - button.press: button_${blueriiot_id_prefix}_doreading
    on_disconnect: [lambda: "id(binary_sensor_${blueriiot_id_prefix}_connected).publish_state(false);"]

# ----------
## Blue Connect
button:
  - platform: template
    id: button_${blueriiot_id_prefix}_doreading
    name: ${blueriiot_name_prefix} do reading
    internal: true
    on_press:
      then:
        - ble_client.ble_write:
            id: ble_client_${blueriiot_id_prefix}
            service_uuid: ${blueriiot_send_service_uuid}
            characteristic_uuid: ${blueriiot_send_characteristic_uuid}
            # A lambda returning an std::vector<uint8_t>.
            value: !lambda |-
              return {0x01};
##
switch:
  - platform: ble_client
    ble_client_id: ble_client_${blueriiot_id_prefix}
    name: "${blueriiot_name_prefix} Enable"
    id: switch_${blueriiot_id_prefix}_enable
    restore_mode: ALWAYS_OFF
#              
binary_sensor:  
  - platform: template
    id: binary_sensor_${blueriiot_id_prefix}_connected
    name: ${blueriiot_name_prefix} Status
    device_class: connectivity
    entity_category: diagnostic

#

sensor: 
  - platform: uptime
    type: seconds
    name: Uptime Sensor
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_temperature
    name: ${blueriiot_name_prefix} Temperature
    # Optional variables:
    unit_of_measurement: "°C"
    icon: mdi:thermometer-water
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
  
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_ph
    name: ${blueriiot_name_prefix} pH
    # sunit_of_measurement: "ph"
    icon: mdi:ph
    state_class: "measurement"
    device_class: "PH"
    accuracy_decimals: 2
    filters:
      - round: 2
    on_value_range: 
      - below: 7.1
        then:
          - text_sensor.template.publish:
              id: text_sensor_${blueriiot_id_prefix}_ph
              state: "LOW"
      - above: 7.1
        below: 7.5
        then:
          - text_sensor.template.publish:
              id: text_sensor_${blueriiot_id_prefix}_ph
              state: "GOOD"
      - above: 7.5
        then:
          - text_sensor.template.publish:
              id: text_sensor_${blueriiot_id_prefix}_ph
              state: "HIGH"
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_orp
    name: ${blueriiot_name_prefix} Chlore
    unit_of_measurement: "mV"
    icon: mdi:biohazard
    device_class: "voltage"
    state_class: "measurement"
    accuracy_decimals: 0
    filters:
      - round: 0
    on_value_range:
      - below: 649
        then:
          - text_sensor.template.publish:
              id: text_sensor_${blueriiot_id_prefix}_orp
              state: "LOW"
      - above: 900
        then:
          - text_sensor.template.publish:
              id: text_sensor_${blueriiot_id_prefix}_orp
              state: "HIGH"
      - above: 650
        below: 899
        then:
          - text_sensor.template.publish:
              id: text_sensor_${blueriiot_id_prefix}_orp
              state: "GOOD"
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_bat
    name: ${blueriiot_name_prefix} Batterie
    # Optional variables:
    unit_of_measurement: "%"
    icon: mdi:battery-bluetooth-variant
    device_class: "BATTERY"
    state_class: "measurement"
    accuracy_decimals: 0
    
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_salt
    name: ${blueriiot_name_prefix} Salinité
    # Optional variables:
    unit_of_measurement: "g/l"
    icon: mdi:shaker-outline
    state_class: "measurement"
    accuracy_decimals: 1
    # relation between ideal salt concention and temperature : salt[g/l] = 5 - 0.8 * temperature [°C]
    # inteval  BELOW/ABOVE : [-0.6 ; +0.6]
    on_value:
      then:
        - lambda: |-
            if ( id(sensor_${blueriiot_id_prefix}_salt).state > (0.6 + 5.0 - 0.8 * id(sensor_${blueriiot_id_prefix}_temperature).state) ) {
              id(text_sensor_${blueriiot_id_prefix}_salt).publish_state("HIGH");
            } else if ( id(sensor_${blueriiot_id_prefix}_salt).state < ( -0.6 + 5.0 - 0.8 * id(sensor_${blueriiot_id_prefix}_temperature).state) ) {
              id(text_sensor_${blueriiot_id_prefix}_salt).publish_state("LOW");
            } else {
              id(text_sensor_${blueriiot_id_prefix}_salt).publish_state("GOOD");
            };
        
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_ecs
    name: ${blueriiot_name_prefix} Conductivité
    # Optional variables:
    unit_of_measurement: "µS/cm"
    icon: "mdi:water-sync"
    state_class: "measurement"
    accuracy_decimals: 0

  - platform: template
    id: sensor_${blueriiot_id_prefix}_chlor
    name: "${blueriiot_name_prefix} Chlorine"
    unit_of_measurement: "PPM"
    icon: "mdi:water-sync"
    state_class: "measurement"
    accuracy_decimals: 0
    filters:
      - round: 0

text_sensor:
  - platform: template
    id: text_sensor_${blueriiot_id_prefix}_salt
    name: ${blueriiot_name_prefix} Salinité Statut
  - platform: template
    id: text_sensor_${blueriiot_id_prefix}_ph
    name: ${blueriiot_name_prefix} pH Statut
  - platform: template
    id: text_sensor_${blueriiot_id_prefix}_orp
    name: ${blueriiot_name_prefix} Chlore Concentration Statut
  - platform: template
    name: Blueriiot last update
    id: uptime_blueriiot
#
  - platform: ble_client
    id: ${blueriiot_id_prefix}_reading_data
    name: ${blueriiot_name_prefix} reading data
    internal: true
    ble_client_id: ble_client_${blueriiot_id_prefix}
    service_uuid: ${blueriiot_recieve_service_uuid}
    characteristic_uuid: ${blueriiot_recieve_characteristic_uuid}
    notify: true
    update_interval: never
    on_notify:
      then:
          # https://community.home-assistant.io/t/blue-connect-pool-measurements/118901/432
          # float salt = (float) (int16_t) 1 / (raw_cond * 0.001) * 1.0615 * 500 / 1000 ;
          # This is experimental and should not be used to dose a pool. Always check with test strips.
          # float chlor = (float)( ( (int16_t) (x[6]<< 8) + x[5]) / 4 - 5 - 650 ) / 200 * 10;
          # [VGT 20250603] float orp = (float)( (int16_t) (x[6]<< 8) + x[5]) / 3.86  - 21.57826;
          # [VGT 20250605] Bat :  BATT_MAX_MV = 3640 ; BATT_MIN_MV = 3400
        - lambda: |-
            std::string rawhex = format_hex_pretty((uint8_t *) x.c_str(), x.size()).c_str();
            ESP_LOGD("raw_hex", "%s", rawhex.c_str());

            float temperature = (float)((int16_t)(x[2]<< 8) + x[1])/100;
            ESP_LOGD("temp", "%f", temperature);
            id(sensor_${blueriiot_id_prefix}_temperature).publish_state(temperature);
                
            float raw_ph = (float)( (int16_t) (x[4]<< 8) + x[3]) ;
            float ph = (float)( (int16_t) (2048 - raw_ph)) / 232.0  + 7.0 ; 
            ESP_LOGD("ph", "%f", ph);
            id(sensor_${blueriiot_id_prefix}_ph).publish_state(ph);
            
            float raw_orp = (float)( (int16_t) (x[6]<< 8) + x[5]);
            float orp = (float)( (int16_t) raw_orp / 4.0 ) - 5.0;
            ESP_LOGD("orp", "%f", orp);
            id(sensor_${blueriiot_id_prefix}_orp).publish_state(orp);

            float chlor = (float)(int16_t) raw_orp / 4.0 - 5.0 - 650.0 / 200.0 * 10.0;
            ESP_LOGD("chlor", "%f", chlor);
            id(sensor_${blueriiot_id_prefix}_chlor).publish_state(chlor);
            
            float raw_cond = (float)( (int16_t) (x[8]<< 8) + x[7]);
            if (raw_cond != 0) {
              float ecs = (float) (int16_t) 1 / (raw_cond * 0.000001) * 1.0615 ;
              ESP_LOGD("ecs", "%f", ecs);
              id(sensor_${blueriiot_id_prefix}_ecs).publish_state(ecs);

              float salt = (float) (int16_t) 1.0 / (raw_cond * 0.001) * 1.0615 * 500 / 1000 ;
              ESP_LOGD("salt", "%f", salt);
              id(sensor_${blueriiot_id_prefix}_salt).publish_state(salt);

            } else {
              ESP_LOGD("ecs", "raw_cond is zero, skipping ECS calculation");
              id(sensor_${blueriiot_id_prefix}_ecs).publish_state(0);
              ESP_LOGD("salt", "raw_cond is zero, skipping SALT calculation");
              id(sensor_${blueriiot_id_prefix}_salt).publish_state(0);
            }

            float raw_bat = (float)( (int16_t) (x[10]<< 8) + x[9]);
            float bat = (float) (raw_bat - 3400) / (3640 - 3400) * 100.0;
            ESP_LOGD("bat", "%f", bat);
            id(sensor_${blueriiot_id_prefix}_bat).publish_state(bat);
            
            id(switch_${blueriiot_id_prefix}_enable).turn_off();

            id(uptime_blueriiot).publish_state(id(homeassistant_time).now().strftime("%Y-%m-%d %H:%M"));
#
# 
#
